use 数据库名称
use test

C->create->创建
db.<collection>.insert(插入的文档对象或者对象组成的数组)
db->数据库,database
collection->集合名称,随便取名
document->文档对象,数据记录

创建数据库流程->先切换到你想要的数据库(use)->对某个集合内部插入数据,会自动创建数据库和集合

R->read->读取
db.collection.find(查询条件对象(Query))	->	Array.prototype.filter
db.collection.findOne(查询条件对象(Query))	->	Array.prototype.find
如果Query不传或者传入空对象,都是代表查看当前集合所有的数据

1.条件符
$in	->	一个属性有多种条件,满足其中任意一个条件,就可以
$nin	->	一个属性有多种条件,内部条件都不满足,就可以
$or	->	多个属性有多种条件,满足任意一个就可以
$and	->	多个属性有多种条件,内部条件都满足,才可以
$where	->	可以自定义一个函数,返回值为true就代表满足条件,this存放着当前的文档对象

2.比较符
大于($gt)	大于等于($gte)	小于($lt)	小于等于($lte)	不等于($ne)

3.模糊查询
通过正则表达式进行模糊查询

4.投影
db.collection.find(查询条件对象(Query),投影条件对象(options))
options中的属性名是你要筛选的属性名(字段名),属性值可以是0||1
0->查找到的文档对象,所有的属性除了当前这个,其他都返回
1->查找到的文档对象,所有的属性只返回当前这个,其他都不返回
除了_id属性,其他的属性不能够出现1和0同时使用






U->update->更新
db.collection.updateOne(Query对象,更新数据对象)//至少两个参数
db.collection.updateMany(Query对象,更新数据对象)

$set->设置字段值
$inc->对某个字段值进行增加(可以为正数或者负数)
$rename->对某个字段名进行重命名
$unset

最新API:db.collection.update(Query对象,更新数据对象,配置对象(options))
options->
upsert	->	如果查找不到满足条件的文档对象,是否自动插入(true为插入,false为不插入,默认false)
multi	->	为true相当于updateMany,为false相当于updateOne

D->delete->删除
db.collection.remove(Query对象)	->	删除满足条件的对象

软删除
在真实开发中,我们宁愿增加十条数据,也不愿意删除一条
db.students.updateMany({studentName:"老王"},{$set:{isdelete:true}})

db.students.updateMany({},{$set:{isdelete:false}})

db.students.find({isdelete:false})
